
jquery: 2.0.3
--------------------------------------------------------------------------------
Deferred
一个工厂函数，这个函数返回一个链式实用对象，用返回对象方法来在回调队列中注册多个回调， 调用回调队列，
传递任何同步或异步函数的成功或失败状态。
返回的deferred对象是包含state，always，catch，pipe，then，promise，progress、done、fail、notify、notifyWith
resolve、resolveWith、reject、rejectWith方法。


基本结构
jQuery.Deferred=function(func){
   var tuples = [
                // action, add listener, listener list, final state
                //动作 ， 添加监听函数类型， 监听函数列表 ， 终止状态
                [ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
                [ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
                [ "notify", "progress", jQuery.Callbacks("memory") ]
            ],

     var state="pending";
     var promise={
        state:function
        always:function
        catch:function
        /*pipe :function*/
        then:function
        promise:function
        /*done | fail | progress */
     };//后面each中还加了progress、done、fail三个函数，分别给这三个状态的callbacks新增回调函数用的

     var deferred={};
	// Keep pipe for back-compat
		promise.pipe = promise.then;

      // Add list-specific methods
      //
        jQuery.each( tuples, function( i, tuple ) {
            var list = tuple[ 2 ],//callbacks
                stateString = tuple[ 3 ];

            // promise[ done | fail | progress ] = list.add  用于向对应类别的tuple[ 2 ]上添加回调函数（订阅者）
            promise[ tuple[1] ] = list.add;

            // Handle state
            if ( stateString ) {
                list.add(function() {
                    // state = [ resolved | rejected ]
                    state = stateString;

                // [ reject_list | resolve_list ].disable; progress_list.lock
                }, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
                //resolved 状态时给resolve对应的回调列表加其他两个类型的reject_list的disable处理函数和progress_list.lock.
                //表示完成状态时reject_list回调列表清空不能再处理，progress_list，锁住 stack=undefined，
                //表示还能用fire一次之后list=[],要重新注册才行？待验证
            }

            // deferred[ resolve | reject | notify ] = function(){
             //deferred[ resolveWith | rejectWith | notifyWith ] ( this === deferred ? promise : this, arguments );
             // return this;
            //  }
            deferred[ tuple[0] ] = function() {//绑定唤起用户注册在回调列表中的函数的方法
                deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
                return this;
            };
            deferred[ tuple[0] + "With" ] = list.fireWith;//callbacks列表中 由fire()唤起处理函数
        });


      promise.promise( deferred );

      if ( func ) {
                 func.call( deferred, deferred );
      }
    return deferred;
}

jQuery.when=function(){
      ...........
     return master.promise();
}

//
-----

Deferred=function(func){}
    关键点：
        1.promise[ done | fail | progress ] = list.add  用于向对应类别的tuple[ 2 ]上添加回调函数（订阅者）,用户注册回调函数的入口
        2.给处理完成的两种状态resolved和rejected添加函数到callbacks列表中，resolved 状态时给resolve对应的回调列表加其他两个类型的reject_list的disable处理函数和progress_list.lock.
                    //表示完成状态时reject_list回调列表清空不能再处理，progress_list，锁住 stack=undefined，
        3.deferred[ resolve | reject | notify ] = function() 用户手动触发回调发布完成状态的方法

-----------
promise.promise(obj)
    将promise对象上的方法合并到obj传参上，如果obj为null则直接返回promise变量

 promise: function( obj ) {   return obj != null ? jQuery.extend( obj, promise ) : promise;      }


-----
promise.pipe()
源码：



------
    promise.then()

        then: function( /* fnDone, fnFail, fnProgress */ ) {
                    var fns = arguments;
                    return jQuery.Deferred(function( newDefer ) {
                        jQuery.each( tuples, function( i, tuple ) {
                            var action = tuple[ 0 ],// resolve | reject | notify
                                fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
                            // deferred[ done | fail | progress ] for forwarding actions to newDefer
                            deferred[ tuple[1] ](function() {
                                var returned = fn && fn.apply( this, arguments );//this 上一次的deferred就是调dfd.resolve的dfd,arguments时上一次的deferred延迟对象调用resolve等操作时传的参数
                                if ( returned && jQuery.isFunction( returned.promise ) ) {//返回的是deferred对象或promise？
                                    returned.promise()
                                        .done( newDefer.resolve )
                                        .fail( newDefer.reject )
                                        .progress( newDefer.notify );
                                } else {//
                                    newDefer[ action + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
                                }
                            });
                        });
                        fns = null;
                    }).promise();
                },
    用then会间接将上传入参数函数添加到上一个defer对象三种状态对应的callbacks列表队列中，同时还根据函数考虑
    内部新建一个newDefer延迟对象，传一个能立即执行的函数，将传入fnDone, fnFail, fnProgress方法使用
    上一次创建的deferred延迟对象的done | fail | progress 方法添加这三个参数函数到就的延迟对象的三种状态对应的callbacks列表中。
    如果参数函数执行后返回的是延迟对象或promise对象则在返回对象上添加callbacks
    否则触发 newDefer[ action + "With" ]
    返回新的newDefer延迟对象的promse接口


测试一：
var wait = function(){
    var dtd = $.Deferred();
    dtd.notify()
    var tasks = function(){
        alert("执行完毕！");
        dtd.resolve();
    };
    setTimeout(tasks,5000);
    return dtd.promise();
}


var wait = function(){
    var dtd = $.Deferred();
    dtd.notify()
    var tasks = function(){
        alert("执行完毕！");
        dtd.resolve();
    };
 //   setTimeout(tasks,5000);
 tasks();
    return dtd.promise();
}

$.when(wait()).then(function(){
    alert("成功")
},function(){
    alert("出错了")
},function(){
    alert("进行中")
}).then(function(value){
    console.log("value=",value)
    alert("成功2")
},function(){
    alert("出错了2")
},function(){
    alert("进行中2")
});

进行中-> 进行中2->执行完毕！->成功->成功2

不用settimeout时
执行完毕！->成功 ->进行中 ->成功2

-------------------------------------------------------------------------------------------------------
CallBacks
'once':
    回调函数列表只回调一次，如果没有附加“memory”模式，则一次回调后list,memory,stack都为undefined，之后什么都不能做
    list：存放回调函数列表。
    初始化时stack触发函数fire的传参列表赋值为false，表示这个列表只被触发一次，没有必要再缓存fire传的参数

    firing标志是否正在处理回调函数列表，
'memory'
    如果已经fire过一次处理了list，则add注册新的回调函数时，会回调回调列表中本次添加的函数，参数是上一次缓存的参数。
    如果是第一次fire（此时fire之前add时memory都为undefined不会自动fire()），则直接回调列表中所有已经添加的函数。
'unique'
    同一个注册函数只能在列表中加一次
'stopOnFalse'
    执行回调函数列表中的函数时如果遇到返回值为false 后面的函数不再执行，memory=false。
     如果还附加了memory模式，阻止此后再用add注册回调函数时触发fire，就是新增的函数不再自动回调。
    如果列表处理结束stack不为空时，继续调用fire，此时如果列表中所有函数都没有返回false，之前的memory=false是不是失效了？
'once memory':
    // Stack of fire calls for repeatable lists
    stack = !options.once && [],  stack被初始为false，如果多次add还未触发过，则触发的时候参数就是当前那个；
        如果触发过一次，然后再add时，memory中缓存的都是第一次触发时传的参数，add一次fire一次且触发时携带memory缓存的参数。
     else if ( memory ) {
        list = [];
    }
    	每次列表被迭代调用过后list会被清空，如果fireWith 触发过了，则不会再触发了，调用fireWith 没用了，
    	但是每次add的时候还能自动内部fire,参数是第一次触发时传入的。


fireWith：
    fireWith: function( context, args ) {
                if ( list && ( !fired || stack ) ) {
                    args = args || [];
                    args = [ context, args.slice ? args.slice() : args ];
                    if ( firing ) {
                        stack.push( args );
                    } else {
                        fire( args );
                    }
                }
                return this;
            },
    回调函数列表存在，且未被触发过或者stack不为false或undefined ，如果firing=true 回调列表中的函数正在被处理（回调）
    ，则将本次触发参数先存入stack。等list中从firingIndex到firingLength-1正在被“锁定”处理回调的处理完成，
    下面还会从stack取出再一次fire触发处理，此时一般从列表开头0开始里面的函数都回调一遍，如果是memory模式且add新函数，
    则把这个新增的处理函数的下标作为从函数列表中开始回调的初始位置，add后直接fire一次fire( memory ) 传的是上一次的参数。

add :
      // Add a callback or a collection of callbacks to the list
                add: function() {
                    if ( list ) {
                        // First, we save the current length
                        var start = list.length;
                        (function add( args ) {
                            jQuery.each( args, function( _, arg ) {
                                var type = jQuery.type( arg );
                                if ( type === "function" ) {
                                    if ( !options.unique || !self.has( arg ) ) {
                                        list.push( arg );
                                    }
                                } else if ( arg && arg.length && type !== "string" ) {
                                    // Inspect recursively
                                    add( arg );
                                }
                            });
                        })( arguments );
                        // Do we need to add the callbacks to the
                        // current firing batch?
                        if ( firing ) {//此处是不是一般不太可能出现？ 待查 webworker多个共享处理？
                            firingLength = list.length;
                            // With memory, if we're not firing then
                            // we should call right away
                        } else if ( memory ) { //如果memory有值，则直接触发本次添加的回调函数，参数就是上一次缓存的值memory
                            firingStart = start;
                            fire( memory );
                        }
                    }
                    return this;
                },
    如果传入的参数是函数（如果是数组或类数组则递归到取得函数值子项），如果unique 为true（unique：同一个处理函数最多在list列表中加一次）
    且已经在列表中加过了就不再加，其他情况可以重复添加同一个处理函数。
    如果firing=true回调列表正在进行回调处理，可以赋值firingLength = list.length，
    让处理新加的函数也在未循环完接着处理，此处是不是一般不太可能出现，待查 webworker多个共享处理？
    如果memory有值，则直接触发本次添加的回调函数，参数就是上一次缓存的值memory。
fire ：
    fire = function( data ) {
                memory = options.memory && data;
                fired = true;
                firingIndex = firingStart || 0;
                firingStart = 0;
                firingLength = list.length;
                firing = true;
                for ( ; list && firingIndex < firingLength; firingIndex++ ) {
                    if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
                        memory = false; // To prevent further calls using add
                        break;
                    }
                }
                firing = false;
                if ( list ) {
                    if ( stack ) {//memory、unique、stopOnFalse标志会进入此分支，stack不是undefined或false（为once时）都会先进这里，disable后 list = stack = memory = undefined;之后触发就失效了
                        if ( stack.length ) {
                            fire( stack.shift() );
                        }
                    } else if ( memory ) {
                        list = [];
                    } else {//如果只once且没有memory 则once触发后清理所有回调
                        self.disable();
                    }
                }
            },
    传参第一个是处理list中回调函数的上下文，第二参数是self.fire传入的给回调函数调用的参数。
    memory 如果这个list是“momery”模式，则将data缓存为memory最近的用于回调的参数供add时调用。
    标记 fired = true; 回调列表被回调过，
    firingIndex赋值接下来要处理的list中函数项的开始位置（如果是memory模式，且add的时候fire回调从本次新加的函数开始，
    其他情况从0开始）。
    循环回调函数列表list来回调用户注册函数。处理过程中如果遇到某个函数的返回结果是false且用户使用了“stopOnFalse”模式，
    则列表中后面的函数不再调用，同时memory =false ，即使假如还要“momery”模式，阻止此后再用add注册回调函数时触发fire。
    stack :memory、unique、stopOnFalse模式会进入此分支，stack不是undefined或false（为once时）都会先进这里，
    disable或lock后 list = stack = memory = undefined;之后触发就失效了

lock：
 // Lock the list in its current state
            lock: function() {
                stack = undefined;
                if ( !memory ) {
                    self.disable();
                }
                return this;
            },
    锁住当前list状态，stack=undefined 以后fire调用列表中的函数后不再存待触发的参数列表，
    如果memory 为false（stopOnFalse且函数返回false时）直接调用disabled（）。即如果stopOnFalse且函数返回false时，
    列表全部清空，调用fire不会再回调列表，add也不能再注册回调函数了。固化了这个列表处理过的状态，以后什么操作都不能做了。


关键点：
    1.memory 模式，之前add 和fire过再次add，会主动调用fire 函数处理本次新增函数，即传入上一次缓存的memory参数并回调新增的函数。
    2.unique模式：   同一个注册函数只能在列表中加一次
    3.once模式： 回调函数列表只回调一次，如果没有附加“memory”模式，则一次回调后list,memory,stack都为undefined，之后什么都不能做
    4.stopOnFalse模式：执行回调函数列表中的函数时如果遇到返回值为false 后面的函数不再执行，memory=false。
        如果还附加了memory模式，阻止此后再用add注册回调函数时触发fire,就是新增的函数不再自动回调。
     如果列表处理结束stack不为空时，继续调用fire，此时如果列表中所有函数都没有返回false，之前的memory=false是不是失效了？


问题：
为什么要使用firing,fire中的处理不是同步进行的吗？