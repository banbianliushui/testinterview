
1.路由使用history模式时
    服务端需要配置一个覆盖所有url返回一个app依赖的index.html页面，这种情况服务端不再返回404错误。
    所以前端路由需要配置一个nofound组件，前端覆盖所有路由*,指定404页面。

2.路由守卫函数next参数必须调
    全局守卫函数 beforeEach
    路由独享守卫 beforeEnter(to, from, next)
    组件内守卫   beforeRouteEnter
                 beforeRouteUpdate (2.2 新增)
                 beforeRouteLeave


    全局后置钩子（无需next）afterEach

 3.挂载根节点
    el
    render:h => h('')
    template
    $mount('#app')

 4.
state :
        const store = new Vuex.Store({
          state: {
            count: 0
          },
          mutations: {
            increment (state) {
              state.count++
            }
          }
        })
        组件中读取state：
        由于 Vuex 的状态存储是响应式的，从 store 实例中读取状态最简单的方法就是在计算属性中返回某个状态：
         computed: {
            count () {
              return this.$store.state.count
            }
          }
          辅助函数mapState生成计算属性：
           computed: mapState({
              // 箭头函数可使代码更简练
              count: state => state.count,
getter：
        多个组件中读取state：
        const store = new Vuex.Store({
          state: {
            todos: [
              { id: 1, text: '...', done: true },
              { id: 2, text: '...', done: false }
            ]
          },
          getters: {
            doneTodos: state => {
              return state.todos.filter(todo => todo.done)
            }
          }
        })
         组件中使用store中的计算属性直接getters：
         computed: {
           doneTodosCount () {
             return this.$store.getters.doneTodosCount
           }
         }
         mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性：
          computed: {
           // 使用对象展开运算符将 getter 混入 computed 对象中
             ...mapGetters([
               'doneTodosCount',
 mutation:
     const store = new Vuex.Store({
       state: {
         count: 1
       },
       mutations: {
         increment (state) {
           // 变更状态
           state.count++
         }
       }
     })
    vm.$store.commit()提交mutation
    组件中提交mutation：
    或使用mapMutations将组建中的methods映射为store.commit,需从根节点诸如
    methods: {
     ...mapMutations([
       'increment', // 将 `this.increment()` 映射为 `this.$store.commit('increment')`
action：提交的是mutation，不是直接变更状态，可以包含异步操作。
        Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，但不是store实例本身。
        分发action：store.dispatch('increment')
        actions: {
          checkout ({ commit, state }, products) {

          }

        组件中分发action
         methods: {
            ...mapActions([
              'increment', // 将 `this.increment()` 映射为 `this.$store.dispatch('increment')`



        store中的 state、getter对应组件中的computed，辅助函数分别是mapState和mapGetters,
        mutation和action对应组件中的methods，辅助函数分别是mapMutations和mapActions


    5.v-bind，从而让它的值被当作 JavaScript 表达式计算
            字面量语法 vs 动态语法
            初学者常犯的一个错误是使用字面量语法传递数值：

            <!-- 传递了一个字符串 "1" -->
            <comp some-prop="1"></comp>
            因为它是一个字面量 prop，它的值是字符串 "1" 而不是一个数值。如果想传递一个真正的 JavaScript 数值，则需要使用 v-bind，从而让它的值被当作 JavaScript 表达式计算：

            <!-- 传递真正的数值 -->
            <comp v-bind:some-prop="1"></comp>

     6.注意在 JavaScript 中对象和数组是引用类型，指向同一个内存空间，如果 prop 是一个对象或数组，在子组件内部改变它会影响父组件的状态。

    7.注意 prop 会在组件实例创建之前进行校验，所以在 default 或 validator 函数里，诸如 data、computed 或 methods 等实例属性还无法使用。

    8.父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件。
        不能用 $on 监听子组件释放的事件，而必须在模板里直接用 v-on 绑定，参见下面的例子。

        <div id="counter-event-example">
          <p>{{ total }}</p>
          <button-counter v-on:increment="incrementTotal"></button-counter>
          <button-counter v-on:increment="incrementTotal"></button-counter>
        </div>
    9..sync 修饰符
    从 2.3.0 起我们重新引入了 .sync 修饰符，但是这次它只是作为一个编译时的语法糖存在。它会被扩展为一个自动更新父组件属性的 v-on 监听器。

    10.v-model语法糖
    <input v-model="something">

    <input
      v-bind:value="something"
      v-on:input="something = $event.target.value">

    11. ref="input"\

    (function() {
    with(this){return _c('div',
    {staticClass:"demo",attrs:{"id":"currency-input-example"}},
    [_c('currency-input',
    {model:{value:(price),callback:function ($$v) {price=$$v},expression:"price"}})],1)}
    })