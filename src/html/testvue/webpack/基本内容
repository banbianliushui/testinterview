    webpack js应用程序的静态模块打包器，webpack处理应用程序时，递归地构建一个依赖图，其中包含应用程序需要的每个模块，然后将这些
模块打包成一个或多个bundle。
    1.入口 entry
    entry指示webpack应该使用哪个模块作为构建内部依赖图的开始。进入入口起点后，webpack找出那些模块和库是入口起点（直接和间接）依赖。
    每个依赖项被处理后输出到bundles的文件中，
    entry: string | [string] | object { <key>: string | [string] } | (function: () => string | [string]
    简单规则：每个 HTML 页面都有一个入口起点。单页应用(SPA)：一个入口起点，多页应用(MPA)：多个入口起点。

    2.出口 output
        输出所建的bundles文件的位置，以及对这些文件的命名。
    3.loader
        webpack自身只理解js，loader可以让webpack取处理非js文件。loader可以将所有类型的文件转换为webpack能够处理的有效模块
        ，然后可以利用webpack的打包能力。
        loader将所有类型的文件转换成应用程序的依赖图（最终的bundle）可以直接引用的模块。
        loader 能够 import 导入任何类型的模块（例如 .css 文件），这是 webpack 特有的功能
        在 webpack 的配置中 loader 有两个目标：
        test 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。
        use 属性，表示进行转换时，应该使用哪个 loader。

        const path = require('path');
        const config = {
          entry: './path/to/my/entry/file.js',
          output: {
            path: path.resolve(__dirname, 'dist'),
            filename: 'my-first-webpack.bundle.js'
          },
          module: {
            rules: [
              { test: /\.txt$/, use: 'raw-loader' }
            ]
          }
        };
        module.exports = config;

        webpack 编译器，当你碰到「在 require()/import 语句中被解析为 '.txt' 的路径」时，在你对它打包之前，先使用 raw-loader 转换一下。”

    4.plugins
        loader用于转换某些类型的模块（test : .txt,.css）,plugins更广泛，从打包优化和压缩，重新定义环境中的变量。
        使用： 先require  然后new xxplugin添加到plugins数组中，插件通过option自定义



5. entry 使用
    向 entry 属性传入「文件路径(file path)数组」将创建“多个主入口(multi-main entry)”。
    在你想要多个依赖文件一起注入，并且将它们的依赖导向(graph)到一个“chunk”时，传入数组的方式就很有用。
    const config = {
      entry: './path/to/my/entry/file.js'
    };

    对象语法 entry: {[entryChunkName: string]: string|Array<string>}
    const config = {
     entry: {
         app: './src/app.js',
         vendors: './src/vendors.js'
       }
    };
    多入口（对象语法）应用场景：
        分离应用程序 和第三方库（vendor）入口：从 app.js 和 vendors.js 开始创建依赖图(dependency graph)。
            这些依赖图是彼此完全分离、互相独立的（每个 bundle 中都有一个 webpack 引导(bootstrap)）。
            使用 CommonsChunkPlugin 从「应用程序 bundle」中提取 vendor 引用(vendor reference) 到 vendor bundle，
            并把引用 vendor 的部分替换为 __webpack_require__() 调用。如果应用程序 bundle 中没有 vendor 代码
            ，那么你可以在 webpack 中实现被称为长效缓存的通用模式。
            一个入口的单页应用+第三方库引用
        多页应用程序：多个独立分离的依赖图，多页应用中每当页面跳转时，服务器将为你获取一个新的 HTML 文档。
                页面重新加载新文档，并且资源被重新下载。
                使用 CommonsChunkPlugin 为每个页面间的应用程序共享代码创建 bundle。

    使用 CommonsChunkPlugin 为每个页面间的应用程序共享代码创建 bundle。


6. output
    控制webpack如何向硬盘写入编译文件，即使多入口但指定一个输出配置。
    用法：
        filename： 用于输出文件的文件名。
        path：目标输出目录 path 的绝对路径。

    多入口或使用commonschunkplugin时应该使用占位符来确保每个文件具有唯一的名称。
    {
      entry: {
        app: './src/app.js',
        search: './src/search.js'
      },
      output: {
        filename: '[name].js',
        path: __dirname + '/dist'
      }
    }
    // 写入到硬盘：./dist/app.js, ./dist/search.js

    cdn和资源hash

    output: {
      path: "/home/proj/cdn/assets/[hash]",
      publicPath: "http://cdn.example.com/assets/[hash]/"
    }

    publicPath：输出解析文件的目录，url 相对于 HTML 页面
    如果你在编译时不知道 publicPath，你可以先忽略它，并且在入口起点设置 __webpack_public_path__。
    __webpack_public_path__ = myRuntimePublicPath

    // 剩余的应用程序入口

7.loader
    用于对模块源代码进行转换。可以在import或“加载”模块时预处理文件。不同语言转化为js，内联图像转换为data url，
    直接在js模块中 import css 文件。

    使用 Loader
        在你的应用程序中，有三种使用 loader 的方式：
        配置（推荐）：在 webpack.config.js 文件中指定 loader。
        内联：在每个 import 语句中显式指定 loader。
        CLI：在 shell 命令中指定它们。

    内联
         import Styles from 'style-loader!css-loader?modules!./styles.css';
         可以在 import 语句或任何等效于 "import" 的方式中指定 loader。使用 ! 将资源中的 loader 分开。
         分开的每个部分都相对于当前目录解析。

    CLI :命令行界面（英语：command-line interface，缩写：CLI）
        webpack --module-bind jade-loader --module-bind 'css=style-loader!css-loader'
        对 .jade 文件使用 jade-loader，对 .css 文件使用 style-loader 和 css-loader。

    Loader 特性
        loader 支持链式传递。能够对资源使用流水线(pipeline)。一组链式的 loader 将按照相反的顺序执行。loader 链中的第一个 loader 返回值给下一个 loader。在最后一个 loader，返回 webpack 所预期的 JavaScript。
        loader 可以是同步的，也可以是异步的。
        loader 运行在 Node.js 中，并且能够执行任何可能的操作。
        loader 接收查询参数。用于对 loader 传递配置。
        loader 也能够使用 options 对象进行配置。
        除了使用 package.json 常见的 main 属性，还可以将普通的 npm 模块导出为 loader，做法是在 package.json 里定义一个 loader 字段。
        插件(plugin)可以为 loader 带来更多特性。
        loader 能够产生额外的任意文件。

    解析Loader
        loader 遵循标准的模块解析。多数情况下，loader 将从模块路径（通常将模块路径认为是 npm install, node_modules）解析。
        loader 模块需要导出为一个函数，并且使用 Node.js 兼容的 JavaScript 编写。通常使用 npm 进行管理，
    但是也可以将自定义 loader 作为应用程序中的文件。按照约定，loader 通常被命名为 xxx-loader（例如 json-loader）。

8.plugins
    webpack 插件是一个具有 apply 属性的 JavaScript 对象。apply 属性会被 webpack compiler 调用，并且 compiler 对象可在整个编译生命周期访问。

    function ConsoleLogOnBuildWebpackPlugin() {

    };

    ConsoleLogOnBuildWebpackPlugin.prototype.apply = function(compiler) {
      compiler.plugin('run', function(compiler, callback) {
        console.log("webpack 构建过程开始！！！");

        callback();
      });
    };

9.配置(Configuration)
    因为 webpack 配置是标准的 Node.js CommonJS 模块，你可以做到以下事情：

    通过 require(...) 导入其他文件
    通过 require(...) 使用 npm 的工具函数
    使用 JavaScript 控制流表达式，例如 ?: 操作符
    对常用值使用常量或变量
    编写并执行函数来生成部分配置

    导出为一个函数:
        +module.exports = function(env, argv) {
        +  return {
        +    devtool: env.production ? 'source-maps' : 'eval',
             plugins: [
               new webpack.optimize.UglifyJsPlugin({
        +        compress: argv['optimize-minimize'] // 只有传入 -p 或 --optimize-minimize
               })
             ]
        +  };

        导出一个 Promise:webpack 将运行由配置文件导出的函数，并且等待 Promise 返回。便于需要异步地加载所需的配置变量。
        module.exports = () => {
          return new Promise((resolve, reject) => {
            setTimeout(() => {
              resolve({
                entry: './app.js',
                /* ... */
              })
            }, 5000)
          })
        }
        导出多个配置对象:
        module.exports = [{
          output: {
            filename: './dist-amd.js',
            libraryTarget: 'amd'
          },
          entry: './app.js',
        }, {
          output: {
            filename: './dist-commonjs.js',
            libraryTarget: 'commonjs'
          },
          entry: './app.js',
        }]

10 模块(Modules)
        对比 Node.js 模块，webpack 模块能够以各种方式表达它们的依赖关系，几个例子如下：

        ES2015 import 语句
        CommonJS require() 语句
        AMD define 和 require 语句
        css/sass/less 文件中的 @import 语句。
        样式(url(...))或 HTML 文件(<img src=...>)中的图片链接(image url)

11.模块解析(Module Resolution)
    resolver 是一个库(library)，用于帮助找到模块的绝对路径。一个模块可以作为另一个模块的依赖模块，然后被后者引用，如下：

    import foo from 'path/to/module'
    // 或者
    require('path/to/module')
    所依赖的模块可以是来自应用程序代码或第三方的库(library)。resolver 帮助 webpack 找到 bundle 中需要引入的模块代码，
    这些代码在包含在每个 require/import 语句中。 当打包模块时，webpack 使用 enhanced-resolve 来解析文件路径

    相对路径：import "../src/file1";
    模块路径：import "module";

    resolve.modules ：模块将在 resolve.modules 中指定的所有目录内搜索。
    resolve.alias ：替换初始模块路径，此替换路径通过使用 resolve.alias 配置选项来创建一个别名。
    resolve.extensions：使用 [resolve.extensions] 选项作为文件扩展名来解析，此选项告诉解析器在解析中能够接受哪些扩展名（例如 .js, .jsx）。
    resolve.mainFields ： 如果文件夹中包含 package.json 文件，则按照顺序查找 resolve.mainFields 配置选项中指定的字段。
                并且 package.json 中的第一个这样的字段确定文件路径。（如果  "main": "index.js", -> index.js）

12.构建目标(Targets)
        var path = require('path');
        var serverConfig = {
          target: 'node',
          output: {
            path: path.resolve(__dirname, 'dist'),
            filename: 'lib.node.js'
          }
          //…
        };

        var clientConfig = {
          target: 'web', // <=== 默认是 'web'，可省略
          output: {
            path: path.resolve(__dirname, 'dist'),
            filename: 'lib.js'
          }
          //…
        };

        module.exports = [ serverConfig, clientConfig ];
        使用 node webpack 会编译为用于「类 Node.js」环境（使用 Node.js 的 require ，而不是使用任意内置模块（如 fs 或 path）来加载 chunk）。

        每个target都有各种部署(deployment)/环境(environment)特定的附加项，以支持满足其需求。查看target 的可用值。

13. Manifest 清单
    当编译器(compiler)开始执行、解析和映射应用程序时，它会保留所有模块的详细要点。这个数据集合称为 "Manifest"，
    当完成打包并发送到浏览器时，会在运行时通过 Manifest 来解析和加载模块。无论你选择哪种模块语法，
    那些 import 或 require 语句现在都已经转换为 __webpack_require__ 方法，此方法指向模块标识符(module identifier)。
    通过使用 manifest 中的数据，runtime 将能够查询模块标识符，检索出背后对应的模块。


14.模块热替换(Hot Module Replacement)
    模块热替换(HMR - Hot Module Replacement)功能会在应用程序运行过程中替换、添加或删除模块，而无需重新加载整个页面。









